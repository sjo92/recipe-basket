datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password        Password?
  notes           Note[]
  Rating          Rating[]
  Favorite        Favorite[]
  GroceryList     GroceryList[]
  GroceryListItem GroceryListItem[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model RecipeMetaData {
  id          String  @id @default(cuid())
  title       String
  titlePhoto  Bytes
  totalRating Decimal
  difficulty  String
  duration    String
  calories    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipeSteps       RecipeStep[]
  Category2Recipe   Category2Recipe[]
  Ingredient2Recipe Ingredient2Recipe[]
  Rating            Rating[]
  Favorite          Favorite[]
}

model RecipeStep {
  id               String @id @default(cuid())
  stepNumber       Int
  instructionText  String
  instructionPhoto String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipeMetaDataId String
  recipeMetaData   RecipeMetaData @relation(fields: [recipeMetaDataId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Category {
  id               String            @id @default(cuid())
  name             String
  parentCategoryId String?           @unique
  parentCategory   Category?         @relation("CategoryToCategory", fields: [parentCategoryId], references: [id])
  subCategories    Category[]        @relation("CategoryToCategory")
  Category2Recipe  Category2Recipe[]
}

model Category2Recipe {
  recipeMetaDataId String
  categoryId       String

  recipeMetaData RecipeMetaData @relation(fields: [recipeMetaDataId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category       Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([recipeMetaDataId, categoryId])
}

model Ingredient {
  id                String              @id @default(cuid())
  name              String
  defaultUnit       String
  link              String
  Ingredient2Recipe Ingredient2Recipe[]
}

model Ingredient2Recipe {
  recipeMetaDataId String
  ingredientId     String
  quantity         Int
  packagingUnit    String
  portion          Int

  recipeMetaData RecipeMetaData @relation(fields: [recipeMetaDataId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ingredient     Ingredient     @relation(fields: [ingredientId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([recipeMetaDataId, ingredientId])
}

model Rating {
  comment String
  rating  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipeMetaDataId String
  recipeMetaData   RecipeMetaData @relation(fields: [recipeMetaDataId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId           String

  @@id([recipeMetaDataId, userId])
}

model Favorite {
  notes String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipeMetaDataId String
  recipeMetaData   RecipeMetaData @relation(fields: [recipeMetaDataId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId           String

  @@id([recipeMetaDataId, userId])
}

model GroceryList {
  id     String @id @default(cuid())
  name   String
  status String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          String
  GroceryListItem GroceryListItem[]
}

model GroceryListItem {
  id     String @id @default(cuid())
  name   String
  status String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  groceryList   GroceryList @relation(fields: [groceryListId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groceryListId String
}
